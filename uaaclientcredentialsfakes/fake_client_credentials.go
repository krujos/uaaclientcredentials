// This file was generated by counterfeiter
package uaaclientcredentialsfakes

import (
	"sync"

	"github.com/krujos/uaaclientcredentials"
)

type FakeClientCredentials struct {
	GetBearerTokenStub        func() (string, error)
	getBearerTokenMutex       sync.RWMutex
	getBearerTokenArgsForCall []struct{}
	getBearerTokenReturns     struct {
		result1 string
		result2 error
	}
	invocations map[string][][]interface{}
}

func (fake *FakeClientCredentials) GetBearerToken() (string, error) {
	fake.getBearerTokenMutex.Lock()
	fake.getBearerTokenArgsForCall = append(fake.getBearerTokenArgsForCall, struct{}{})
	fake.guard("GetBearerToken")
	fake.invocations["GetBearerToken"] = append(fake.invocations["GetBearerToken"], []interface{}{})
	fake.getBearerTokenMutex.Unlock()
	if fake.GetBearerTokenStub != nil {
		return fake.GetBearerTokenStub()
	} else {
		return fake.getBearerTokenReturns.result1, fake.getBearerTokenReturns.result2
	}
}

func (fake *FakeClientCredentials) GetBearerTokenCallCount() int {
	fake.getBearerTokenMutex.RLock()
	defer fake.getBearerTokenMutex.RUnlock()
	return len(fake.getBearerTokenArgsForCall)
}

func (fake *FakeClientCredentials) GetBearerTokenReturns(result1 string, result2 error) {
	fake.GetBearerTokenStub = nil
	fake.getBearerTokenReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClientCredentials) Invocations() map[string][][]interface{} {
	return fake.invocations
}

func (fake *FakeClientCredentials) guard(key string) {
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
}

var _ uaaclientcredentials.ClientCredentials = new(FakeClientCredentials)
